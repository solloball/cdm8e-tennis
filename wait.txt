        #  reflect on X
        if
            ldi r0, xBall
            ld r0, r0
            ldi r1, 0x1e
            cmp r0, r1
        is ge
            if
                ldi r0, yBall
                ld r0, r0
                ldi r1, 0x1e # x of right platform 
                ld r1, r1 #get coord of the middle pixel of the left platform
                ldi r2, 0x1f # 00011111
                and r1, r2
                cmp r0, r2
            is eq, or
                inc r2 #get coord of the upper pixel of the right platform
                cmp r0, r2
            is eq, or
                dec r2
                dec r2 #get coord of the lower pixel of the right platform
                cmp r0, r2

            is eq
            then
                ldi r1, reflectX
                st r1, r0
                ldi r0, update
                ld r0, r3
                ldi r0, update
                ld r0, r3
            else
                #halt
            fi
        fi
        if
            ldi r0, xBall
            ld r0, r0
            ldi r1, 1
            cmp r1, r0
        is ge
            if
                ldi r0, yBall
                ld r0, r0
                ldi r1, 1 # x of left platform 
                ld r1, r1 #get coord of the middle pixel of the left platform
                inc r1
                ldi r2, 0x1f # 00011111
                and r1, r2
                cmp r0, r2
            is eq, or
                inc r2 #get coord of the upper pixel of the left platform
                cmp r0, r2
            is eq, or
                dec r2
                dec r2 #get coord of the lower pixel of the left platform
                cmp r0, r2

            is eq
            then
                ldi r1, reflectX
                st r1, r0
                ldi r0, update
                ld r0, r3
                ldi r0, update
                ld r0, r3
            else
                halt
            fi
        fi
    rts